//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace T100Test.T100WBS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TIPTOPServiceGateWayBinding", Namespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay")]
    public partial class TIPTOPServiceGateWay : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback invokeSrvOperationCompleted;
        
        private System.Threading.SendOrPostCallback invokeMdmOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncProdOperationCompleted;
        
        private System.Threading.SendOrPostCallback callbackSrvOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TIPTOPServiceGateWay() {
            this.Url = global::T100Test.Properties.Settings.Default.T100Test_T100WBS_TIPTOPServiceGateWay;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event invokeSrvCompletedEventHandler invokeSrvCompleted;
        
        /// <remarks/>
        public event invokeMdmCompletedEventHandler invokeMdmCompleted;
        
        /// <remarks/>
        public event syncProdCompletedEventHandler syncProdCompleted;
        
        /// <remarks/>
        public event callbackSrvCompletedEventHandler callbackSrvCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay", ResponseNamespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("response")]
        public string invokeSrv(string request) {
            object[] results = this.Invoke("invokeSrv", new object[] {
                        request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeSrvAsync(string request) {
            this.invokeSrvAsync(request, null);
        }
        
        /// <remarks/>
        public void invokeSrvAsync(string request, object userState) {
            if ((this.invokeSrvOperationCompleted == null)) {
                this.invokeSrvOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeSrvOperationCompleted);
            }
            this.InvokeAsync("invokeSrv", new object[] {
                        request}, this.invokeSrvOperationCompleted, userState);
        }
        
        private void OninvokeSrvOperationCompleted(object arg) {
            if ((this.invokeSrvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeSrvCompleted(this, new invokeSrvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay", ResponseNamespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("response")]
        public string invokeMdm(string request) {
            object[] results = this.Invoke("invokeMdm", new object[] {
                        request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void invokeMdmAsync(string request) {
            this.invokeMdmAsync(request, null);
        }
        
        /// <remarks/>
        public void invokeMdmAsync(string request, object userState) {
            if ((this.invokeMdmOperationCompleted == null)) {
                this.invokeMdmOperationCompleted = new System.Threading.SendOrPostCallback(this.OninvokeMdmOperationCompleted);
            }
            this.InvokeAsync("invokeMdm", new object[] {
                        request}, this.invokeMdmOperationCompleted, userState);
        }
        
        private void OninvokeMdmOperationCompleted(object arg) {
            if ((this.invokeMdmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.invokeMdmCompleted(this, new invokeMdmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay", ResponseNamespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("response")]
        public string syncProd(string request) {
            object[] results = this.Invoke("syncProd", new object[] {
                        request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void syncProdAsync(string request) {
            this.syncProdAsync(request, null);
        }
        
        /// <remarks/>
        public void syncProdAsync(string request, object userState) {
            if ((this.syncProdOperationCompleted == null)) {
                this.syncProdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncProdOperationCompleted);
            }
            this.InvokeAsync("syncProd", new object[] {
                        request}, this.syncProdOperationCompleted, userState);
        }
        
        private void OnsyncProdOperationCompleted(object arg) {
            if ((this.syncProdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncProdCompleted(this, new syncProdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay", ResponseNamespace="http://www.digiwin.com.cn/tiptop/TIPTOPServiceGateWay", Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        [return: System.Xml.Serialization.XmlElementAttribute("response")]
        public string callbackSrv(string request) {
            object[] results = this.Invoke("callbackSrv", new object[] {
                        request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void callbackSrvAsync(string request) {
            this.callbackSrvAsync(request, null);
        }
        
        /// <remarks/>
        public void callbackSrvAsync(string request, object userState) {
            if ((this.callbackSrvOperationCompleted == null)) {
                this.callbackSrvOperationCompleted = new System.Threading.SendOrPostCallback(this.OncallbackSrvOperationCompleted);
            }
            this.InvokeAsync("callbackSrv", new object[] {
                        request}, this.callbackSrvOperationCompleted, userState);
        }
        
        private void OncallbackSrvOperationCompleted(object arg) {
            if ((this.callbackSrvCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.callbackSrvCompleted(this, new callbackSrvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void invokeSrvCompletedEventHandler(object sender, invokeSrvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeSrvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeSrvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void invokeMdmCompletedEventHandler(object sender, invokeMdmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class invokeMdmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal invokeMdmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void syncProdCompletedEventHandler(object sender, syncProdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncProdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncProdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void callbackSrvCompletedEventHandler(object sender, callbackSrvCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class callbackSrvCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal callbackSrvCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591